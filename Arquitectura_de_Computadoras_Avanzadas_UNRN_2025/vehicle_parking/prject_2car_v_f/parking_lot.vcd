$date
	Thu Aug 21 21:49:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_parking_lot $end
$var wire 7 ! seg [6:0] $end
$var wire 4 " an [3:0] $end
$var reg 1 # clk $end
$var reg 1 $ reset $end
$var reg 1 % sw0 $end
$var reg 1 & sw1 $end
$scope module dut $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 % sw0 $end
$var wire 1 & sw1 $end
$var wire 7 ' seg1 [6:0] $end
$var wire 7 ( seg0 [6:0] $end
$var wire 7 ) seg [6:0] $end
$var wire 1 * db_b $end
$var wire 1 + db_a $end
$var wire 7 , count [6:0] $end
$var wire 1 - car_exit $end
$var wire 1 . car_enter $end
$var wire 8 / bcd [7:0] $end
$var wire 4 0 an [3:0] $end
$scope module bcd_conv $end
$var wire 7 1 bin [6:0] $end
$var reg 8 2 bcd [7:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 3 i [31:0] $end
$upscope $end
$upscope $end
$scope module counter $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 . inc $end
$var wire 1 - dec $end
$var reg 7 4 count [6:0] $end
$upscope $end
$scope module db_a_inst $end
$var wire 1 # clk $end
$var wire 1 % in $end
$var reg 1 + out $end
$var reg 2 5 sync_reg [1:0] $end
$upscope $end
$scope module db_b_inst $end
$var wire 1 # clk $end
$var wire 1 & in $end
$var reg 1 * out $end
$var reg 2 6 sync_reg [1:0] $end
$upscope $end
$scope module fsm $end
$var wire 1 + a $end
$var wire 1 * b $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var reg 1 . car_enter $end
$var reg 1 - car_exit $end
$var reg 3 7 next_state [2:0] $end
$var reg 3 8 state [2:0] $end
$upscope $end
$scope module mux $end
$var wire 1 # clk $end
$var wire 7 9 seg1 [6:0] $end
$var wire 7 : seg0 [6:0] $end
$var reg 4 ; an [3:0] $end
$var reg 20 < counter [19:0] $end
$var reg 7 = seg [6:0] $end
$var reg 2 > sel [1:0] $end
$upscope $end
$scope module seg0_dec $end
$var wire 4 ? bcd [3:0] $end
$var reg 7 @ seg [6:0] $end
$upscope $end
$scope module seg1_dec $end
$var wire 4 A bcd [3:0] $end
$var reg 7 B seg [6:0] $end
$upscope $end
$upscope $end
$scope task test_car_entry $end
$upscope $end
$scope task test_car_exit $end
$upscope $end
$scope task test_invalid $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1000000 B
b0 A
b1000000 @
b0 ?
bx >
b1111111 =
bx <
b1111 ;
b1000000 :
b1000000 9
b0 8
b0 7
bx 6
bx 5
b0 4
b111 3
b0 2
b0 1
b1111 0
b0 /
0.
0-
b0 ,
x+
x*
b1111111 )
b1000000 (
b1000000 '
0&
0%
1$
0#
b1111 "
b1111111 !
$end
#5
bx0 5
bx0 6
1#
#10
0#
#15
b0 6
b0 5
1#
0$
#20
0#
#25
0+
0*
1#
#30
0#
#35
b1 5
1#
1%
#40
0#
#45
b11 5
1#
#50
0#
#55
b1 7
b1 6
1+
1#
1&
#60
0#
#65
b1 8
b11 6
1#
#70
0#
#75
b10 7
1*
b10 5
1#
0%
#80
0#
#85
b10 8
b0 5
1#
#90
0#
#95
b11 7
b10 6
0+
1#
0&
#100
0#
#105
b11 8
b0 6
1#
#110
0#
#115
b0 7
0*
1#
#120
0#
#125
1.
b0 8
1#
#130
0#
#135
b1111001 (
b1111001 :
b1111001 @
b1 ?
b1 /
b1 2
b111 3
0.
b1 ,
b1 1
b1 4
1#
#140
0#
#145
1#
#150
0#
#155
b1 6
1#
1&
#160
0#
#165
b11 6
1#
#170
0#
#175
b100 7
1*
b1 5
1#
1%
#180
0#
#185
b100 8
b11 5
1#
#190
0#
#195
b101 7
b10 6
1+
1#
0&
#200
0#
#205
b101 8
b0 6
1#
#210
0#
#215
b110 7
0*
b10 5
1#
0%
#220
0#
#225
b110 8
b0 5
1#
#230
0#
#235
b0 7
0+
1#
#240
0#
#245
1-
b0 8
1#
#250
0#
#255
b1000000 (
b1000000 :
b1000000 @
b0 ?
b111 3
b0 /
b0 2
0-
b0 ,
b0 1
b0 4
1#
#260
0#
#265
1#
#270
0#
#275
b1 5
1#
1%
#280
0#
#285
b11 5
1#
#290
0#
#295
b1 7
1+
b10 5
1#
0%
#300
0#
#305
b1 8
b0 5
1#
#310
0#
#315
b0 7
0+
1#
#320
0#
#325
b0 8
1#
#330
0#
#335
1#
#340
0#
#345
1#
#350
0#
#355
b1 5
1#
1%
#360
0#
#365
b11 5
1#
#370
0#
#375
b1 7
b1 6
1+
1#
1&
#380
0#
#385
b1 8
b11 6
1#
#390
0#
#395
b10 7
1*
b10 5
1#
0%
#400
0#
#405
b10 8
b0 5
1#
#410
0#
#415
b11 7
b10 6
0+
1#
0&
#420
0#
#425
b11 8
b0 6
1#
#430
0#
#435
b0 7
0*
1#
#440
0#
#445
1.
b0 8
1#
#450
0#
#455
b1111001 (
b1111001 :
b1111001 @
b1 ?
b1 /
b1 2
b111 3
0.
b1 ,
b1 1
b1 4
1#
#460
0#
#465
1#
#470
0#
#475
b1 5
1#
1%
#480
0#
#485
b11 5
1#
#490
0#
#495
b1 7
b1 6
1+
1#
1&
#500
0#
#505
b1 8
b11 6
1#
#510
0#
#515
b10 7
1*
b10 5
1#
0%
#520
0#
#525
b10 8
b0 5
1#
#530
0#
#535
b11 7
b10 6
0+
1#
0&
#540
0#
#545
b11 8
b0 6
1#
#550
0#
#555
b0 7
0*
1#
#560
0#
#565
1.
b0 8
1#
#570
0#
#575
b100100 (
b100100 :
b100100 @
b10 ?
b111 3
b10 /
b10 2
0.
b10 ,
b10 1
b10 4
1#
#580
0#
#585
1#
#590
0#
#595
b1 5
1#
1%
#600
0#
#605
b11 5
1#
#610
0#
#615
b1 7
b1 6
1+
1#
1&
#620
0#
#625
b1 8
b11 6
1#
#630
0#
#635
b10 7
1*
b10 5
1#
0%
#640
0#
#645
b10 8
b0 5
1#
#650
0#
#655
b11 7
b10 6
0+
1#
0&
#660
0#
#665
b11 8
b0 6
1#
#670
0#
#675
b0 7
0*
1#
#680
0#
#685
1.
b0 8
1#
#690
0#
#695
b110000 (
b110000 :
b110000 @
b11 ?
b111 3
b11 /
b11 2
0.
b11 ,
b11 1
b11 4
1#
#700
0#
#705
1#
#710
0#
#715
b1 6
1#
1&
#720
0#
#725
b11 6
1#
#730
0#
#735
b100 7
1*
b1 5
1#
1%
#740
0#
#745
b100 8
b11 5
1#
#750
0#
#755
b101 7
b10 6
1+
1#
0&
#760
0#
#765
b101 8
b0 6
1#
#770
0#
#775
b110 7
0*
b10 5
1#
0%
#780
0#
#785
b110 8
b0 5
1#
#790
0#
#795
b0 7
0+
1#
#800
0#
#805
1-
b0 8
1#
#810
0#
#815
b100100 (
b100100 :
b100100 @
b10 ?
b111 3
b10 /
b10 2
0-
b10 ,
b10 1
b10 4
1#
#820
0#
#825
1#
#830
0#
#835
b1 6
1#
1&
#840
0#
#845
b11 6
1#
#850
0#
#855
b100 7
1*
b1 5
1#
1%
#860
0#
#865
b100 8
b11 5
1#
#870
0#
#875
b101 7
b10 6
1+
1#
0&
#880
0#
#885
b101 8
b0 6
1#
#890
0#
#895
b110 7
0*
b10 5
1#
0%
#900
0#
#905
b110 8
b0 5
1#
#910
0#
#915
b0 7
0+
1#
#920
0#
#925
1-
b0 8
1#
#930
0#
#935
b1111001 (
b1111001 :
b1111001 @
b1 ?
b111 3
b1 /
b1 2
0-
b1 ,
b1 1
b1 4
1#
#940
0#
#945
1#
#950
0#
#955
1#
#960
0#
#965
1#
#970
0#
#975
1#
#980
0#
#985
1#
#990
0#
#995
1#
#1000
0#
#1005
1#
#1010
0#
#1015
1#
#1020
0#
#1025
1#
#1030
0#
#1035
1#
